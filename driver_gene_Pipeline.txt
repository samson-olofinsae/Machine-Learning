Projec: Investigating cancer driver genes from prostrate cancer NGS data
Description of project: The project predicts driver genes from indels and SNVs VCF files based on Non-synonymous mutation (prediction statistics, q < 0.1)
Tool: dNdScv-Bioconductor package
Analysis Scripts: 6 Scripts (3 Bash, 2 R, 1 Python)

#Script1 : Bash Script generating input files for dNdScv package

#!/bin/bash --login
#$ -cwd

#generates the sample (n)_indel.vcf.gz files (n = numerical samples number)
COUNTER=0

for file in `ls /path_to_vcf_files/*_Tier_3.vcf.gz`
do
  let COUNTER=COUNTER+1
  echo $file $COUNTER
  cp $file sample${COUNTER}_indel.vcf.gz
done

#generates .txt files for array job input
for file in *_indel.vcf.gz; do  echo $file >> allfiles.txt; done
for file in *_indel.vcf.gz
do sample=`echo $file | cut -d '_' -f 1`
echo ${sample}_final_indel >> allfinalindel.txt
done

#Script2: Bash Script generating dNdScv mutation table

#!/bin/bash --login
#$ -cwd
#$ -pe smp.pe 4
#$ -t 1-N   # specify your sample number (N = number VCF files)

mkdir dNdScv_output
x="${SGE_TASK_ID}p"
file=`sed -n $x allfiles.txt`
finalindel=`sed -n $x allfinalindel.txt`
sampleId=`echo $file | cut -d '_' -f 1`
zcat $file | grep -v "##" | awk '{gsub (/#/,"")}1' | awk -v ID="${sampleId^}" 'NR==1{print "SampleID", $1, $2, $4, $5; next}{print ID, $1, $2, $4, $5}' | tail -n +2 > $finalindel
#concatenates all *_final_indel files and attach the dndscv headers to generate the dndscv mutation table
for file in **_final_indel ; do cat $file >> combined.txt ; done
awk 'BEGIN {print "SampleID chr pos ref mut"}{print $0}' combined.txt  > dndscv_mutation.txt

mv dndscv_mutation.txt dNdScv_output

Script3: R Script genenating driver genes from dndscv_mutation.txt

library (dndscv)
m = read.table("path_to_mutation_table/dndscv_mutation.txt", header=1, stringsAsFactors = F)
dndsout = dndscv(m)
sel_cv = dndsout$sel_cv
print(sel_cv)
signif_genes = sel_cv[sel_cv$qglobal_cv<0.1, c("gene_name","qglobal_cv")]
rownames(signif_genes) = NULL
print(signif_genes)
print(dndsout$globaldnds)
print(dndsout$annotmuts)
print(dndsout$nbreg$theta)
signif_genes_localmodel = as.vector(dndsout$sel_loc$gene_name[dndsout$sel_loc$qall_loc<0.1])
print(signif_genes_localmodel)

Script4: Bash Script executing R Script3
#!/bin/bash --login
#$ -cwd

cd /path_to_mutation_table/

module load apps/gcc/R/4.1.2

R CMD BATCH dNdScv.R
./dNdScv.R

Script5: Python Script scoring mutations in genes as clonal or subclonal

import pandas as pd
import glob
import os
import pandas as pd
import numpy as np

dpoutput="/path_to_dpclust_output/dpcluster2"
dndscvfile="/path_to_dNdScv_output_file/dNdScv_file.csv"
#dndscvfile="exp.csv"

#get sample ids

df=pd.read_csv(dndscvfile)

allsamples=df['SampleID'].values

path_dict={}
allsamplefolders=glob.glob('%s/*'%dpoutput)
allinfo=[]
errors=[]
for folder in allsamplefolders:

    try:
        name1=os.path.split(folder)[-1].split('_')[0]
        name2=os.path.split(folder)[-1].split('_')[1]
        print(name1)
        print(name2)
        #path_dict[name]=folder
    except:
        errors.append('%s-output files do not exist'%folder)
        print('output file not not exist:%s',folder)
        continue      

         
    DBCLUST_CLONALITY_FILE="%s/%s_%s_2000iters_1000burnin_bestClusterInfo.txt"%(folder,name1,name2)
    DPCLUST_VARIANT_FILE = "%s/%s_%s_2000iters_1000burnin_bestConsensusAssignments.bed"%(folder,name1,name2)

    try:
        clusterdf=pd.read_csv(DPCLUST_VARIANT_FILE,sep='\t')
        clonalitydf=pd.read_csv(DBCLUST_CLONALITY_FILE,sep='\t')
    except:
        errors.append('%s-output files do not exist'%name)
        print('output file not not exist:%s',name)
        continue
                         
    info=df[df['SampleID']==name1].values[0]
    subset=df[df['SampleID']==name1]
    for info in subset.values:
        chr_,pos=info[1],info[2]
        start=pos-1
        end=pos
        print(chr_,start,end)

        #search for assigned cluster

        try:
            clusterval=clusterdf[ (clusterdf['chr']==chr_) & (clusterdf['start']==start) & (clusterdf['end']==end)].values[0][3]
       
            print(clusterval)

            clonality_value=clonalitydf[clonalitydf['cluster.no']==clusterval]['location'].values[0]
            no_of_mutations=clonalitydf[clonalitydf['cluster.no']==clusterval]['no.of.mutations'].values[0]
            print(clonality_value)
        except:
            errors.append('%s-%s-%s'%(name1,chr_,'chr or clonality information not found in bestClusterInfo.txt'))
            items=[name1,chr_,pos,'none','none','none','none','none','none']
            items=np.append(info,items,axis=0)
            allinfo.append(items)

            continue
   
    #if clonality_value>1.05:
    #    clonality_label='superclonal'
        if clonality_value<0.95:
            clonality_label='subclonal'
        elif clonality_value >=0.95 and clonality_value <=1.05:
            clonality_label='clonal'
        elif clonality_value>1.05:
            clonality_label='superclonal'
    #gggg
        items=np.append(info,[name1,chr_,pos,start,end,clusterval,clonality_value,clonality_label,no_of_mutations],axis=0)
        allinfo.append(items)
        print(info)
        print([name1,chr_,pos,start,end,clusterval,clonality_value,clonality_label])
        print(items)


cols=df.columns
newcols=np.append(cols,['SampleID','CHR','POS','START','END','CLUSTER','CLONALITY_SCORE','CLONALITY_LABEL','NO.OF.MUTATIONS'],axis=0)
newdf=pd.DataFrame(allinfo,columns=newcols)
newdf.to_csv('final.csv',index=False)


with open('errors.txt','w') as errorout:
    errorout.write('\n'.join(errors))
    

#Script 6: R Script plotting chats for functional annotation of driver mutation 

# - Clonality plot for annotated driver genes

Clonality_data <- Drivers_gene %>%

 select (Sign_genes, CLONALITY_LABEL)

 jpeg("clonality.jpeg")

 ggplot(Clonality_data,aes(x = Sign_genes, fill = CLONALITY_LABEL)) + geom_bar()  + coord_flip()

 dev.off()

 #- functional impact plot for annotated driver genes
 select (Sign_genes, CLONALITY_LABEL)

 jpeg("impact.jpeg")

 ggplot(Clonality_data,aes(x = Sign_genes, fill = impact)) + geom_bar()  + coord_flip()

 dev.off()

 # programme exited
