#STAGE1: install conda and rkit - rkit enables to compute the molecular descriptors for the compound in the preproccessed dataset

! wget https: // repo.anaconda.com/miniconda/Miniconda3-py37_4.8.2-Linux-x86_64.sh
! chmod + x Miniconda3-py37_4.8.2-Linux-x86_64.sh
! bash ./Miniconda3-py37_4.8.2-Linux-x86_64.sh - b - f - p / usr/local
! conda install - c rdkit rdkit - y
sys.path.append('/usr/local/lib/python3.7/site-packages/')


# load bioactivity data into df
import pandas as pd
df = pd.read_csv('bioactivity_preprocessed_data.csv')
df.head(3)

#! pip install rdkit

#STAGE2: Compute the Lipinski Descriptors


#import libraries

import numpy as np
from rdkit import Chem
from rdkit.Chem import Descriptors, Lipinski

# Calculate descriptors (from lipinski parameters)
# the link was modified to include the descriptor for this analysis
# the lipinski function takes inmput from the smiles value in the df data


# create the lipinski function, inspired by the link https://codeocean.com/explore/capsules?query=tag:data-curation


def lipinski(smiles, verbose=False):

    moldata = []
    for elem in smiles:
        mol = Chem.MolFromSmiles(elem)
        moldata.append(mol)

    baseData = np.arange(1, 1)
    i = 0
    for mol in moldata:

        desc_MolWt = Descriptors.MolWt(mol)
        desc_MolLogP = Descriptors.MolLogP(mol)
        desc_NumHDonors = Lipinski.NumHDonors(mol)
        desc_NumHAcceptors = Lipinski.NumHAcceptors(mol)

        row = np.array([desc_MolWt,
                        desc_MolLogP,
                        desc_NumHDonors,
                        desc_NumHAcceptors])

        if (i == 0):
            baseData = row
        else:
            baseData = np.vstack([baseData, row])
        i = i+1

    columnNames = ["MW", "LogP", "NumHDonors", "NumHAcceptors"]
    descriptors = pd.DataFrame(data=baseData, columns=columnNames)

    return descriptors


# generate the lipsinski descriptor as a dataframe (df_lipinski)
df_lipinski = lipinski(df.canonical_smiles)
df_lipinski

# combine the lipinski dataframe with the df dataframe (the bioactivity_preproccessed data inputed originally)
df_combined = pd.concat([df, df_lipinski], axis=1)
df_combined



#STAGE3:  transform the IC50 values to pIC50 (negative log scale, i.e -log10(IC50)) in order to make the IC50 data more uniform
#The pIC59() function will accpet a dataframe as input and will:
# -converts the IC50 values from nM to M, take the molar value and apply -log10, delecte the standard_value column and creates a new PIc50 column 

# https://github.com/chaninlab/estrogen-receptor-alpha-qsar/blob/master/02_ER_alpha_RO5.ipynb

# inspect the statistic of the df_combined datafram. if any value is > 100,000,000, we need to cap it to 100,000,000 after converting IC50 to pIC50

df_combined.standard_value.describe()

#run the custome function

def pIC50(input):
    pIC50 = []

    for i in input['standard_value_norm']:
        molar = i*(10**-9)  # Converts nM to M
        pIC50.append(-np.log10(molar))

    input['pIC50'] = pIC50
    x = input.drop('standard_value_norm', 1)

    return x

# NORMALISATION
# IF df_combined has values > 100000000, generate a normalisation fucntion to cap the standard value


def norm_value(input):
    norm = []

    for i in input['standard_value']:
        if i > 100000000:
            i = 100000000
        norm.append(i)

    input['standard_value_norm'] = norm
    x = input.drop('standard_value', 1)

    return x


# normalising:  apply the norm_value() function to normalise the values in the standard_value column
df_norm = norm_value(df_combined)
df_norm.head(3)

# apply the pIC50 function to the df_norm dataframe. The standard_value column is delected and replaaced with pIC50 column.
df_final = pIC50(df_norm)
df_final

# describe the df_final datafram
df_final.pIC50.describe()

#remove the "intermediate" class

df_2class = df_final[df_final.bioactivity_class != 'intermediate']
df_2class

# inspect the statistic of the df_norm
df_norm.standard_value_norm.describe()

#STAGE4: perform Exploratory Data Analysis (chemical space analysis) via Lipinski descriptors

# import library (seaborn and matplotlib)
import seaborn as sns
sns.set(style='ticks')
import matplotlib.pyplot as plt

# getting the frequency plot of the 2 bioactivity classes
plt.figure(figsize=(5.5, 5.5))

sns.countplot(x='bioactivity_class', data=df_2class, edgecolor='black')

plt.xlabel('Bioactivity class', fontsize=14, fontweight='bold')
plt.ylabel('Frequency', fontsize=14, fontweight='bold')

plt.savefig('plot_bioactivity_class.pdf')

# Scatter plot of MW versus LogP
plt.figure(figsize=(5.5, 5.5))

sns.scatterplot(x='MW', y='LogP', data=df_2class,
                hue='bioactivity_class', size='pIC50', edgecolor='black', alpha=0.7)

plt.xlabel('MW', fontsize=14, fontweight='bold')
plt.ylabel('LogP', fontsize=14, fontweight='bold')
plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0)
plt.savefig('plot_MW_vs_LogP.pdf')

# Box plots
# pIC50 value

plt.figure(figsize=(5.5, 5.5))

sns.boxplot(x='bioactivity_class', y='pIC50', data=df_2class)

plt.xlabel('Bioactivity class', fontsize=14, fontweight='bold')
plt.ylabel('pIC50 value', fontsize=14, fontweight='bold')

plt.savefig('plot_ic50.pdf')

# Statistical analysis | Mann-Whitney U Test- tests the statistical significance between the active and non-active

#code modifified from  https://machinelearningmastery.com/nonparametric-statistical-significance-tests-in-python/
def mannwhitney(descriptor, verbose=False):
   
    from numpy.random import seed
    from numpy.random import randn
    from scipy.stats import mannwhitneyu

# seed the random number generator
    seed(1)

# actives and inactives
    selection = [descriptor, 'bioactivity_class']
    df = df_2class[selection]
    active = df[df.bioactivity_class == 'active']
    active = active[descriptor]

    selection = [descriptor, 'bioactivity_class']
    df = df_2class[selection]
    inactive = df[df.bioactivity_class == 'inactive']
    inactive = inactive[descriptor]

# compare samples
    stat, p = mannwhitneyu(active, inactive)
    # print('Statistics=%.3f, p=%.3f' % (stat, p))

# interpret
    alpha = 0.05
    if p > alpha:
        interpretation = 'Same distribution (fail to reject H0)'
    else:
        interpretation = 'Different distribution (reject H0)'

    results = pd.DataFrame({'Descriptor': descriptor,
                            'Statistics': stat,
                            'p': p,
                            'alpha': alpha,
                            'Interpretation': interpretation}, index=[0])
    filename = 'mannwhitneyu_' + descriptor + '.csv'
    results.to_csv(filename)

    return results

#apply the manwhitney fuction to the pIC50 variable to test the significance
mannwhitney('pIC50')

# statistical visualisation for Molecular weight
plt.figure(figsize=(5.5, 5.5))

sns.boxplot(x='bioactivity_class', y='MW', data=df_2class)

plt.xlabel('Bioactivity class', fontsize=14, fontweight='bold')
plt.ylabel('MW', fontsize=14, fontweight='bold')

plt.savefig('plot_MW.pdf')

# apply the manwhitney fuction to the MW variable to test the significance
mannwhitney('MW')

# statistical visualisation for LogP
plt.figure(figsize=(5.5, 5.5))

sns.boxplot(x='bioactivity_class', y='LogP', data=df_2class)

plt.xlabel('Bioactivity class', fontsize=14, fontweight='bold')
plt.ylabel('MW', fontsize=14, fontweight='bold')

plt.savefig('plot_logP.pdf')

# apply the manwhitney fuction to the MW variable to test the significance
mannwhitney('LogP')

# statistical visualisation for NumHDonors
plt.figure(figsize=(5.5, 5.5))

sns.boxplot(x='bioactivity_class', y='NumHDonors', data=df_2class)

plt.xlabel('Bioactivity class', fontsize=14, fontweight='bold')
plt.ylabel('MW', fontsize=14, fontweight='bold')

plt.savefig('plot_NumHDonors.pdf')

# apply the manwhitney fuction to the NumHDonors variable to test the significance
mannwhitney('NumHDonors')

# statistical visualisation for NumHAcceptors
plt.figure(figsize=(5.5, 5.5))

sns.boxplot(x='bioactivity_class', y='NumHAcceptors', data=df_2class)

plt.xlabel('Bioactivity class', fontsize=14, fontweight='bold')
plt.ylabel('MW', fontsize=14, fontweight='bold')

plt.savefig('plot_NumHAcceptors.pdf')

# apply the manwhitney fuction to the NumHAcceptors variable to test the significance
mannwhitney('NumHAcceptors')
